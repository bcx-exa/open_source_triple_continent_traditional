Resources:
  # Web Launch Template
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ${env:REGION}-web-lt
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 22
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/xvdcz
        CreditSpecification:
          CpuCredits: Unlimited
        ImageId: ${env:AMI_ID}
        InstanceType: ${env:INSTANCE_TYPE_WEB}
        KeyName: ${env:KEYPAIR_NAME}
        Monitoring:
          Enabled: true
        SecurityGroupIds:
        - Fn::GetAtt:
              - WebSg
              - GroupId
        UserData:
            Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                echo "Hello from user-data!"
                yum update -y
                cd /home/ec2-user
                sudo yum install -y awscli
                curl --silent --location https://rpm.nodesource.com/setup_15.x | bash
                yum -y install nodejs
                npm install aws-cli
                npm install pm2 -g
                npm install cross-env -g
                aws s3 sync s3://${WEB_S3_BUCKET}/App App
                cd App
                npm install --unsafe-perm
                cross-env NUXT_ENV_REGION=${REGION} NUXT_ENV_APP_ALB=${APP_ALB} NUXT_HOST=0.0.0.0 NUXT_PORT=3000 npm run build
                cross-env NUXT_ENV_REGION=${REGION} NUXT_ENV_APP_ALB=${APP_ALB} NUXT_HOST=0.0.0.0 NUXT_PORT=3000 npm run dev
                echo "Yay everything started"
                INSTANCE_ID="`wget -q -O - http://instance-data/latest/meta-data/instance-id`" && \
                aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id $INSTANCE_ID --lifecycle-hook-name ${LIFECYCLE_HOOK_WEB} --auto-scaling-group-name ${ASG_NAME_WEB} --region ${REGION} || 
                aws autoscaling complete-lifecycle-action --lifecycle-action-result ABANDON --instance-id $INSTANCE_ID --lifecycle-hook-name ${LIFECYCLE_HOOK_WEB} --auto-scaling-group-name ${ASG_NAME_WEB} --region ${REGION}
            - WEB_S3_BUCKET: ${env:WEB_S3_BUCKET}
              LIFECYCLE_HOOK_WEB: ${env:LIFECYCLE_HOOK_WEB}
              ASG_NAME_WEB: ${env:ASG_NAME_WEB}
              REGION: ${env:REGION}
              APP_ALB: ${env:APP_ALB_CNAME}
              UI_STACK_NAME: ${UI_STACK_NAME}
        IamInstanceProfile:
          Arn: !GetAtt ec2RoleInstanceProfile.Arn

  # Auto Scaling Group
  WebAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ${env:REGION}-web-asg
      MinSize: ${env:ASG_MIN}
      MaxSize: ${env:ASG_MAX}
      DesiredCapacity: ${env:ASG_DESIRED}
      HealthCheckGracePeriod: 300
      LifecycleHookSpecificationList:
        - LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"
          LifecycleHookName: ${env:LIFECYCLE_HOOK_WEB}
          HeartbeatTimeout: 4800
      TargetGroupARNs:
        - !Ref WebAlbTg
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref WebSubAz1
        - !Ref WebSubAz2
        - !Ref WebSubAz3
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Name
          Value: web-ec2-instance-${env:STAGE}
          PropagateAtLaunch: "true"
        - Key: Environment
          Value: ${env:STAGE}
          PropagateAtLaunch: "true"
#
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ec2RoleInstanceProfile
    Properties:
      LaunchTemplateName: ${env:REGION}-app-lt
      LaunchTemplateData:
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 22
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/xvdcz
        CreditSpecification:
          CpuCredits: Unlimited
        ImageId: ${env:AMI_ID}
        InstanceType: ${env:INSTANCE_TYPE_APP}
        KeyName: ${env:KEYPAIR_NAME}
        Monitoring:
          Enabled: true
        SecurityGroupIds:
        - Fn::GetAtt:
              - AppSg
              - GroupId
        UserData: 
            Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                echo "Hello from user-data!"
                yum update -y
                cd /home/ec2-user
                sudo yum install -y awscli
                curl --silent --location https://rpm.nodesource.com/setup_15.x | bash
                yum -y install nodejs
                npm install aws-cli
                npm install pm2 -g
                npm install cross-env -g
                aws s3 sync s3://${APP_S3_BUCKET}/App App
                cd App
                npm install --unsafe-perm
                npm run build
                cross-env NODE_ENV=${REGION} DB_TABLE_NAME=${DB_TABLE_NAME} REGION=${REGION} pm2 start
                echo "Yay everything started"
                INSTANCE_ID="`wget -q -O - http://instance-data/latest/meta-data/instance-id`" && \
                aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id $INSTANCE_ID --lifecycle-hook-name ${LIFECYCLE_HOOK_APP} --auto-scaling-group-name ${ASG_NAME_APP} --region ${REGION} || 
                aws autoscaling complete-lifecycle-action --lifecycle-action-result ABANDON --instance-id $INSTANCE_ID --lifecycle-hook-name ${LIFECYCLE_HOOK_APP} --auto-scaling-group-name ${ASG_NAME_APP} --region ${REGION}
            - APP_S3_BUCKET: ${env:APP_S3_BUCKET}
              LIFECYCLE_HOOK_APP: ${env:LIFECYCLE_HOOK_APP}
              ASG_NAME_APP: ${env:ASG_NAME_APP}
              REGION: ${env:REGION}
              DB_TABLE_NAME: ${env:DB_TABLE_NAME}
        IamInstanceProfile:
          Arn: !GetAtt ec2RoleInstanceProfile.Arn
  AppAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ${env:REGION}-app-asg
      MinSize: ${env:ASG_MIN}
      MaxSize: ${env:ASG_MAX}
      DesiredCapacity: ${env:ASG_DESIRED}
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref AppAlbTg
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref AppSubAz1
        - !Ref AppSubAz2
        - !Ref AppSubAz3
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Name
          Value: app-ec2-instance-${env:STAGE}
          PropagateAtLaunch: "true"
        - Key: Environment
          Value: ${env:STAGE}
          PropagateAtLaunch: "true"